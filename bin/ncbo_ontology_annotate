#!/usr/bin/env ruby

# Exit cleanly from an early interrupt
Signal.trap("INT") { exit 1 }

# Setup the bundled gems in our environment
require 'bundler/setup'

# Configure the process for the current cron configuration.
require_relative '../lib/ncbo_cron'
config_exists = File.exist?(File.expand_path('../../config/config.rb', __FILE__))
abort("Please create a config/config.rb file using the config/config.rb.sample as a template") unless config_exists
require_relative '../config/config'

platform = "local"
if LinkedData.settings.goo_host.include? "stage"
  platform = "stage"
elsif LinkedData.settings.goo_host.include? "prod"
  platform = "prod"
end
puts "Running on #{platform} platform"

require 'optparse'
options = {}
opt_parser = OptionParser.new do |opts|
  # Set a banner, displayed at the top of the help screen.
  #opts.banner = "Usage: ncbo_ontology_metrics [options]"
  options[:ontology] = false
  opts.on('-o', '--ontology ONTOLOGY_ACRONYM', 'Ontology acronym to annotate (required).') do |acronym|
    puts "Processing annotations for ontology: #{acronym}"
    options[:ontology] = acronym
  end
  options[:logfile] = "annotations.log"
  opts.on( '-l', '--logfile FILE', "Write log to FILE (default is 'annotations.log')" ) do |filename|
    options[:logfile] = filename
  end
  # Display the help screen, all programs are assumed to have this option.
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end
# Parse the command-line. The 'parse' method simply parses ARGV, while the 'parse!' method parses ARGV and removes
# any options found there, as well as any parameters for the options.
opt_parser.parse!
unless options[:ontology]
  puts opt_parser.help
  exit(1)
end

begin
  logger = Logger.new(options[:logfile])
  puts "Processing details are logged to #{options[:logfile]}"
  ont = LinkedData::Models::Ontology.find(options[:ontology]).first
  if ont.nil?
    msg = "Quitting, ontology not found: #{options[:ontology]}"
    logger.error(msg)
    puts msg
    exit(1)
  end
  sub = ont.latest_submission(status: :rdf)
  if sub.nil?
    msg = "Quitting, cannot find latest submission with 'rdf' parsed status."
    logger.error(msg)
    puts msg
    exit(1)
  end
  sub.bring_remaining
  # Note: there is no option for annotator in sub.process_submission.
  #sub.process_submission(logger,
  #                     process_rdf: false, index_search: false,
  #                     run_metrics: true, reasoning: false)
  # make available in annotator
  status_annotator = LinkedData::Models::SubmissionStatus.find('ANNOTATOR').first
  status_annotator_error = LinkedData::Models::SubmissionStatus.find('ERROR_ANNOTATOR').first
  sub.remove_submission_status(status_annotator)
  sub.remove_submission_status(status_annotator_error)
  annotator = Annotator::Models::NcboAnnotator.new
  annotator.create_cache_for_submission(logger, sub)
  annotator.generate_dictionary_file()
  sub.add_submission_status(status_annotator)
rescue Exception => e
  sub.add_submission_status(status_annotator_error)
  msg = "Failed, exception: #{e.to_json}."
  logger.error(msg)
  puts msg
  exit(1)
end

