#!/usr/bin/env ruby

# Exit cleanly from an early interrupt
Signal.trap("INT") { exit 1 }

# Setup the bundled gems in our environment
require 'bundler/setup'

# Used for getting jobs from the queue and processing them
require_relative '../lib/ncbo_cron'
config_exists = File.exist?(File.expand_path('../../config/config.rb', __FILE__))
abort("Please create a config/config.rb file using the config/config.rb.sample as a template") unless config_exists
require_relative '../config/config'



platform = "local"
if LinkedData.settings.goo_host.include? "stage"
  platform = "stage"
elsif LinkedData.settings.goo_host.include? "prod"
  platform = "prod"
end
puts "Running on #{platform} platform; repository = #{LinkedData.settings.repository_folder}"
unless File.exists? LinkedData.settings.repository_folder
  puts "ERROR: respository path does not exist: #{LinkedData.settings.repository_folder}"
  exit!
end

require 'optparse'
OptionParser.new do |o|
  o.on('-a', '--logall', 'Log all upload file paths, annoted as correct or erroneous.') { $log_all = true }
  o.on('-n', '--dryrun', 'Only log upload file problems, do not change any data or files.') { $dry_run = true }
  o.on('-h', '--help', 'Display the help screen') { puts o; exit }
  o.parse!
end
if $dry_run
  puts 'This is a dry-run, to log upload file problems.'
end

ontologies = LinkedData::Models::Ontology.where.include(:acronym,:submissions,:summaryOnly).all
ontologies.sort! {|a,b| a.acronym.downcase <=> b.acronym.downcase }
ontologies.each do |ont|
  next if ont.summaryOnly
  ont.submissions.each do |sub|
    sub.bring(:uploadFilePath) if sub.bring?(:uploadFilePath)
    sub.bring(:pullLocation) if sub.bring?(:pullLocation)
    sub.bring(:submissionId) if sub.bring?(:submissionId)
  end
  submissions = ont.submissions.sort {|a,b| a.submissionId <=> b.submissionId }
  submissions.each do |sub|
    if sub.uploadFilePath.nil?
      # Some submissions can have a nil uploadFilePath
      sub.bring_remaining
      unless sub.valid?
        # This should not be a nil uploadFilePath, just report it, nothing can be done about it here.
        printf("ERROR:\t%-15s\tsubmission: %4d; uploadFilePath: nil\n", "#{ont.acronym}:", sub.submissionId)
        # TODO: should we delete invalid submissions?
      end
      next
    end
    if sub.uploadFilePath.start_with? "#{LinkedData.settings.repository_folder}/#{ont.acronym}/#{sub.submissionId}"
      # This could be OK
      if $log_all
        printf("VALID:\t%-15s\tsubmission: %4d; uploadFilePath: %s\n", "#{ont.acronym}:", sub.submissionId, sub.uploadFilePath)
      end
      next
    else
      # This is an error
      printf("ERROR:\t%-15s\tsubmission: %4d; uploadFilePath: %s\n", "#{ont.acronym}:", sub.submissionId, sub.uploadFilePath)
      next if $dry_run
      begin
        uploadFilePath = "#{LinkedData.settings.repository_folder}/#{ont.acronym}/#{sub.submissionId}"
        uploadFileName = File.basename(sub.uploadFilePath)
        uploadFile = "#{uploadFilePath}/#{uploadFileName}"
        begin
          FileUtils.mkdir_p uploadFilePath
          FileUtils.copy(sub.uploadFilePath, uploadFile, {:preserve => true, :verbose => true} )
        rescue Exception => e
          if e.message.start_with? 'same file:'
            # If it's the same file, it's probably a symlink and we can update the sub.uploadFilePath anyway.
          else
            # It's some other exception, skip any change to sub.uploadFilePath, just report the failure below.
            raise e
          end
        end
        sub.uploadFilePath = uploadFile
        sub.bring_remaining
        if sub.valid?
          sub.save
        end
        #
        # TODO: The old upload file is 'orphaned' after the sub.save; this script could
        #       remove them after a successful sub.save.  The files are logged and could be
        #       removed by another process.
        #
      rescue Exception => e
        puts "*********************************************************************************************************"
        puts "Failed to relocate the uploadFilePath"
        puts e.message
        puts "*********************************************************************************************************"
      end
      # TODO: should we delete invalid submissions at this stage?
    end
  end
end

