#!/usr/bin/env ruby

# Exit cleanly from an early interrupt
Signal.trap("INT") { exit 1 }

# Setup the bundled gems in our environment
require 'bundler/setup'

# Configure the process for the current cron configuration.
require_relative '../lib/ncbo_cron'
config_exists = File.exist?(File.expand_path('../../config/config.rb', __FILE__))
abort("Please create a config/config.rb file using the config/config.rb.sample as a template") unless config_exists
require_relative '../config/config'
require 'optparse'

options = {}
opt_parser = OptionParser.new do |opts|
  options[:logfile] = STDOUT
  options[:cache_clear] = false

  opts.on( '-l', '--logfile FILE', "Write log to FILE (default is STDOUT)" ) do |filename|
    options[:logfile] = filename
  end

  opts.on('-c', '--clear [true/false]', 'Whether to clear Goo/HTTP caches after SPAM deletion. Default: false') do |cl|
    options[:cache_clear] = cl
  end

  # Display the help screen, all programs are assumed to have this option.
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end

def redis_goo
  Redis.new(host: LinkedData.settings.goo_redis_host, port: LinkedData.settings.goo_redis_port, timeout: 30)
end

def redis_http
  Redis.new(host: LinkedData.settings.http_redis_host, port: LinkedData.settings.http_redis_port, timeout: 30)
end

opt_parser.parse!
options[:cache_clear] = true if options[:cache_clear] == "true"

begin
  logger = Logger.new(options[:logfile])
  puts "Processing details are logged to #{options[:logfile] == STDOUT ? "STDOUT" : options[:logfile]}"
  NcboCron::Models::SpamDeletion.new(logger).run
  msg = "Completed removing SPAM"
  puts msg
  logger.info(msg)

  if options[:cache_clear] == true
    msg = "Clearing Goo/HTTP caches..."
    logger.info(msg)
    redis_goo.flushdb
    redis_http.flushdb
    msg = "Completed clearing Goo/HTTP caches"
    logger.info(msg)
  end
rescue Exception => e
  msg = "Failed SPAM removal with exception: #{e.class}: #{e.message}\n#{e.backtrace.join("\n")}"
  logger.error(msg)
  puts msg
  exit(1)
end
