#!/usr/bin/env ruby

# Exit cleanly from an early interrupt
Signal.trap("INT") { exit 1 }

# Setup the bundled gems in our environment
require 'bundler/setup'

# Used for getting jobs from the queue and processing them
require_relative '../lib/ncbo_cron'

# redis store for looking up queued jobs
require 'redis'

# Daemonize the process
require 'dante'

runner = Dante::Runner.new('ncbo_cron')
runner.description = "This will run a scheduled job for NCBO-related processing"

runner.with_options do |opts|
  opts.on("-h", "--redis-host HOST", String, "redis host (for shared locking)") do |host|
    options[:redis_host] = host
  end
  opts.on("-p", "--redis-port PORT", Integer, "redis port (for shared locking)") do |port|
    options[:redis_port] = port
  end
  opts.on("-m", "--minutes MIN", Integer, "minutes between process queue checks (override seconds)") do |m|
    options[:minutes_between] = m
  end
  opts.on("-s", "--seconds SEC", Integer, "seconds between process queue checks") do |s|
    options[:seconds_between] = s
  end

  # Logging
  require 'logger'
  log_dir = File.expand_path("../../logs", __FILE__)
  FileUtils.mkdir_p(log_dir)
  options[:log_path] ||= "#{log_dir}/scheduler.log"
  
  # pid file
  options[:pid_path] = File.expand_path("../ncbo_cron.pid", __FILE__)
  
  # Defaults
  options[:redis_host] ||= "localhost"
  options[:redis_port] ||= 6379
  options.delete(:host)
  options.delete(:port)
end

runner.execute do |opts|
  redis = Redis.new(host: opts[:redis_host], port: opts[:redis_port])

  puts "Running ncbo_cron with options:"
  pp opts
  
  # Redirect stdout, stderr
  log_file = File.new(opts[:log_path], "a")
  logger = Logger.new(log_file)
  $stderr = log_file
  $stdout = log_file

  options = {
    logger: logger
  }.merge(opts)

  NcboCron::Scheduler.scheduled_locking_job(options) do
    parser = NcboCron::Models::OntologySubmissionParser.new
    parser.process_queue_submissions
  end
end