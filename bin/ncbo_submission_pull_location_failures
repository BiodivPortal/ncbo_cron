#!/usr/bin/env ruby

# Exit cleanly from an early interrupt
Signal.trap("INT") { exit 1 }

# Setup the bundled gems in our environment
require 'bundler/setup'
#require 'rest-client'
require 'net/http'

# Used for getting jobs from the queue and processing them
require_relative '../lib/ncbo_cron'
config_exists = File.exist?(File.expand_path('../../config/config.rb', __FILE__))
abort("Please create a config/config.rb file using the config/config.rb.sample as a template") unless config_exists
require_relative '../config/config'

platform = "local"
if LinkedData.settings.goo_host.include? "stage"
  platform = "stage"
elsif LinkedData.settings.goo_host.include? "prod"
  platform = "prod"
end
puts "Running on #{platform} platform; repository = #{LinkedData.settings.repository_folder}"

require 'optparse'
$email_to = []
$email_from = ['support@bioportal.org']
OptionParser.new do |o|
  o.on('-a', '--logall', 'Log all pull locations, annoted as correct or erroneous.') { $log_all = true }
  o.on('-e', '--email', 'Email ontology admins about invalid pull locations.') { $email = true }
  o.on('-f', '--email_from ADDRESS[,ADDRESS,...]', 'Email senders (plus support@bioportal.org).') do |addresses|
    $email_from.push(addresses.split(',')).flatten
  end
  o.on('-t', '--email_to ADDRESS[,ADDRESS,...]', 'Email to recipients (override notification to ontology admins).') do |addresses|
    $email_to.push(addresses.split(',')).flatten
  end
  o.on('-h', '--help', 'Display the help screen') { puts o; exit }
  o.parse!
end

#def pull_location_exists?(uri_string)
#  begin
#    exists = RestClient.head(uri_string).code == 200
#  rescue RestClient::Exception => error
#    puts error.http_code
#    exists = (error.http_code != 404)
#  rescue Exception => e
#    puts e.to_json
#    exists = false
#  end
#  return exists
#end

#def pull_location_head(uri_string)
#  url_base = uri_string.split('/')[2]
#  url_path = '/'+uri_string.split('/')[3..-1].join('/')
#  Net::HTTP.start(url_base) do |http|
#    resp = http.request_head(URI.escape(url_path))
#    puts resp.to_json
#  end
#end

def check_http_file(uri)
  begin
    session = Net::HTTP.new(uri.host, uri.port)
    session.use_ssl = true if uri.port == 443
    session.start do |http|
      response = http.head(uri.request_uri)
      return response.code if response.code >= 400
      # Just getting the header is not sufficient to detect some 500 errors on downloads, so
      # we must try to get the file, although it takes longer.
      response = http.get(uri.request_uri)
      return response.code
    end
  rescue Exception => e
    puts e.message
    return 500
  end
end

def check_ftp_file(uri)
  ftp = Net::FTP.new(uri.host, uri.user, uri.password)
  ftp.login
  begin
    return ftp.size(uri.path) > 0
  rescue Exception => e
    # Check using another method
    path = uri.path.split("/")
    filename = path.pop
    path = path.join("/")
    ftp.chdir(path)
    files = ftp.dir
    # Dumb check, just see if the filename is somewhere in the list
    files.each { |file| return true if file.include?(filename) }
  end
  return false
end

def notify(recipients, subject, body)
  return unless $email
  unless $email_to.empty?  # option to override ontology admin emails
    body += "<br/><p>P.S. ontology admins: #{recipients}</p>"
    recipients = $email_to.join(',')
  end
  sender     = $email_from.join(',')
  headers    = { 'Content-Type' => 'text/html' }
  mail_options = {
      address: LinkedData.settings.smtp_host,
      port:    LinkedData.settings.smtp_port,
      domain:  LinkedData.settings.smtp_domain # the HELO domain provided by the client to the server
  }
  if LinkedData.settings.smtp_auth_type && LinkedData.settings.smtp_auth_type != :none
    mail_options.merge({
                           user_name:      LinkedData.settings.smtp_user,
                           password:       LinkedData.settings.smtp_password,
                           authentication: LinkedData.settings.smtp_auth_type
                       })
  end
  Pony.mail({
                to: recipients,
                from: sender,
                subject: subject,
                body: body,
                headers: headers,
                via: :smtp,
                via_options: mail_options
            })
  puts "Email notification sent to: #{recipients}."
end

#
# MAIN
#
ontologies = LinkedData::Models::Ontology.where.include(:acronym,:summaryOnly,:administeredBy).all
ontologies.sort! {|a,b| a.acronym.downcase <=> b.acronym.downcase }
ontologies.each do |ont|
  ont.bring(:summaryOnly) if ont.bring?(:summaryOnly)
  next if ont.summaryOnly
  sub = ont.latest_submission(status: :any)
  if sub.nil?
    printf("ERROR:\t%-15s\tsubmission:  nil\n", ont.acronym)
    next
  end
  sub.bring(:submissionId) if sub.bring?(:submissionId)
  sub.bring(:pullLocation) if sub.bring?(:pullLocation)
  if sub.pullLocation.nil?
    # Some submissions can have a nil value
    sub.bring_remaining
    unless sub.valid?
      # This should not be nil, just report it, nothing can be done about it here.
      printf("ERROR:\t%-15s\tsubmission: %4d; pullLocation: nil\n", "#{ont.acronym}:", sub.submissionId)
    end
    next
  end
  if sub.remote_file_exists?(sub.pullLocation)
    if $log_all
      printf("VALID:\t%-15s\tsubmission: %4d; pullLocation: %s\n", "#{ont.acronym}:", sub.submissionId, sub.pullLocation)
    end
    next
  end
  # If it gets this far, there is a problem with the pull location;
  # try to find out what the problem is with the pullLocation.
  uri = URI.parse(sub.pullLocation)
  if uri.kind_of?(URI::FTP)
    response = check_ftp_file(uri)
  else
    response = check_http_file(uri)
  end
  printf("ERROR:\t%-15s\tsubmission: %4d; pullLocation: %s; status: %s\n", "#{ont.acronym}:", sub.submissionId, sub.pullLocation, response)

  # Create email notification
  if $email
    contacts = []
    ont.bring(:administeredBy) if ont.bring?(:administeredBy)
    ont.administeredBy.map do |user|
      user.bring(:email) if user.bring?(:email)
      contacts.push(user.email)
    end
    recipients = contacts.join(',')
    subject = "[BioPortal] ontology download fails for #{ont.acronym}"
    body = <<-EOS
<br/>
RE: http://bioportal.bioontology.org/ontologies/#{ont.acronym}<br/>
<br/>
To whom it may concern,<br/>
<br/>
There is a problem with the download location for the #{ont.acronym} ontology, i.e.<br/>
<br/>
    #{sub.pullLocation}<br/>
<br/>
Can you help to fix this?<br/>
<br/>
Thanks,<br/>
BioPortal Team
EOS
    notify(recipients, subject, body)
  end

end

