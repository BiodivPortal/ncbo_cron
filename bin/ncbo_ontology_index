#!/usr/bin/env ruby

# Exit cleanly from an early interrupt
Signal.trap("INT") { exit 1 }

# Setup the bundled gems in our environment
require 'bundler/setup'

# Configure the process for the current cron configuration.
require_relative '../lib/ncbo_cron'
config_exists = File.exist?(File.expand_path('../../config/config.rb', __FILE__))
abort("Please create a config/config.rb file using the config/config.rb.sample as a template") unless config_exists
require_relative '../config/config'

platform = "local"
if LinkedData.settings.goo_host.include? "stage"
  platform = "stage"
elsif LinkedData.settings.goo_host.include? "prod"
  platform = "prod"
end
puts "Running on #{platform} platform"

require 'optparse'
options = {}
opt_parser = OptionParser.new do |opts|
  # Set a banner, displayed at the top of the help screen.
  #opts.banner = "Usage: ncbo_ontology_index [options]"
  options[:ontologies] = []
  opts.on('-a', '--all-ontologies', 'Index all ontologies (this or -o option required).') do
    puts "Processing index for all ontologies:"
    LinkedData::Models::Ontology.all.each  do |ont|
      ont.bring(:acronym)
      options[:ontologies].push(ont.acronym)
    end
  end
  opts.on('-o', '--ontology ONTOLOGY_ACRONYM', 'Ontology to index (this or -a option required).') do |acronym|
    puts "Processing index for ontology: #{acronym}"
    options[:ontologies].push(acronym)
  end
  #options[:dry_run] = false
  #opts.on('-n', '--dryrun', 'Ontology index is not committed to SOLR.') do
  #  puts 'This is a dry-run, the index will not be committed to SOLR.'
  #  options[:dry_run] = true
  #end
  options[:logfile] = "indexing.log"
  opts.on( '-l', '--logfile FILE', "Write log to FILE (default is 'indexing.log')" ) do |filename|
    options[:logfile] = filename
  end
  #options[:verbose] = false
  #opts.on( '-v', '--verbose', 'Output more information' ) do
  #  options[:verbose] = true
  #end
  # Display the help screen, all programs are assumed to have this option.
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end
# Parse the command-line. The 'parse' method simply parses ARGV, while the 'parse!' method parses ARGV and removes
# any options found there, as well as any parameters for the options.
opt_parser.parse!
unless options[:ontologies]
  puts opt_parser.help
  exit(1)
end

def index_ontology(acronym, logger)
  begin
    ont = LinkedData::Models::Ontology.find(acronym).first
    if ont.nil?
      msg = "Ontology not found: #{acronym}"
      logger.error(msg)
      return
    end
    logger.info("Retrieved ontology: #{acronym}.")
    sub = ont.latest_submission(status: :rdf)
    if sub.nil?
      msg = "Cannot find latest submission with 'rdf' parsed status."
      logger.error(msg)
      return
    end
    # NOTE: process_submission controls all aspects of re-indexing, including
    # removal of the old index and committing a new index.  There is no 'dry-run' option.
    sub.bring_remaining
    sub.process_submission(logger,
                           process_rdf: false,
                           index_search: true, index_commit: false,
                           run_metrics: false, reasoning: false)
  rescue Exception => e
    msg = "Failed, exception: #{e.to_json}."
    logger.error(msg)
  end
end


begin
  logger = Logger.new(options[:logfile])
  puts "Processing details are logged to #{options[:logfile]}"
  options[:ontologies].each { |acronym| index_ontology(acronym, logger) }

  logger.info("Committing index...")
  LinkedData::Models::Class.indexCommit()
  logger.info("Optimizing index...")
  LinkedData::Models::Class.indexOptimize()
  logger.info("Completed committing and optimizing index.")
rescue Exception => e
  msg = "Failed, exception: #{e.to_json}."
  logger.error(msg)
  puts msg
  exit(1)
end
