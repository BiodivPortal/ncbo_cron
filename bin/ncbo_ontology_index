#!/usr/bin/env ruby

# Exit cleanly from an early interrupt
Signal.trap("INT") { exit 1 }

# Setup the bundled gems in our environment
require 'bundler/setup'

# Configure the process for the current cron configuration.
require_relative '../lib/ncbo_cron'
config_exists = File.exist?(File.expand_path('../../config/config.rb', __FILE__))
abort("Please create a config/config.rb file using the config/config.rb.sample as a template") unless config_exists
require_relative '../config/config'

platform = "local"
if LinkedData.settings.goo_host.include? "stage"
  platform = "stage"
elsif LinkedData.settings.goo_host.include? "prod"
  platform = "prod"
end
puts "Running on #{platform} platform"

require 'optparse'
options = {}
opt_parser = OptionParser.new do |opts|
  # Set a banner, displayed at the top of the help screen.
  #opts.banner = "Usage: optparse1.rb [options] file1 file2 ..."
  options[:ontology] = false
  opts.on('-o', '--ontology ONTOLOGY_ACRONYM', 'Ontology acronym to index (required).') do |acronym|
    puts "Processing index for ontology: #{acronym}"
    options[:ontology] = acronym
  end
  options[:dry_run] = false
  opts.on('-n', '--dryrun', 'Ontology index is not committed to SOLR.') do
    puts 'This is a dry-run, the index will not be committed to SOLR.'
    options[:dry_run] = true
  end
  options[:logfile] = "indexing.log"
  opts.on( '-l', '--logfile FILE', "Write log to FILE (default is 'indexing.log')" ) do |filename|
    options[:logfile] = filename
  end
  options[:verbose] = false
  opts.on( '-v', '--verbose', 'Output more information' ) do
    options[:verbose] = true
  end
  # Display the help screen, all programs are assumed to have this option.
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end
# Parse the command-line. The 'parse' method simply parses ARGV, while the 'parse!' method parses ARGV and removes
# any options found there, as well as any parameters for the options.
opt_parser.parse!
unless options[:ontology]
  puts opt_parser.help
  exit(1)
end

begin
  logger = Logger.new(options[:logfile])
  ont = LinkedData::Models::Ontology.find(options[:ontology]).first
  if ont.nil?
    msg = "Quitting, ontology not found: #{options[:ontology]}"
    logger.error(msg)
    puts msg
    exit(1)
  end
  logger.info("Retrieved ontology: #{options[:ontology]}...")
  sub = ont.latest_submission(status: :rdf)
  if sub.nil?
    msg = "Quitting, cannot find latest submission with 'rdf' parsed status."
    logger.error(msg)
    puts msg
    exit(1)
  end
  sub.bring_remaining
  logger.info("Retrieved submission: #{sub.submissionId}...")
  logger.info("Began remove old index on ontology: #{options[:ontology]}...")
  ont.unindex
  logger.info("Completed remove old index on ontology: #{options[:ontology]}.")
  logger.info("Began indexing ontology: #{options[:ontology]}...")
  sub.process_submission(logger,
                       process_rdf: false, index_search: true,
                       run_metrics: false, reasoning: false)
  logger.info("Completed indexing ontology: #{options[:ontology]}.")
  unless options[:dry_run]
    logger.info("Began index commit...")
    # TODO: Ask Misha about whether to commit index on ontology or class model.
    #ont.indexCommit
    LinkedData::Models::Class.indexCommit()
    logger.info("Completed index commit.")
    logger.info("Began optimizing index...")
    # TODO: Ask Misha about whether this is required for a single ontology update.
    LinkedData::Models::Class.indexOptimize()
    logger.info("Completed optimizing index.")
  end
rescue Exception => e
  msg = "Failed, unknown exception: #{e.to_json}."
  logger.error(msg)
  puts msg
  exit(1)
end

